
线性表：是n个数据元素的有限序列。

表示：
    线性表的数组表示    线性表
    线性表的链式表示  ：链式表

线性表的基本操作：
    1.初始化
    2.插入: 默认插入最后，还可以插入指定位置，后面的位置往后移动
    3.删除：删除元素，把后面的元素往前移动
    4.查找
    5.获取
    6.更新：
    7.判空
    8.求长度
    9.遍历
    10.销毁




//    //默认数增长
//    private static final int DEFAULT_CAPACITY = 10;
//    // 线性表的长度（包含元素的数量）
//    private int size;
//    // 存储（可以定义为Object， 插入的时候用泛型规定插入的数据类型、就不会发生类型转换异常）
//    private T[] arr;
//    /**
//     * 存储ArrayList元素的数组缓冲区，ArrayList的容量是这个数组缓冲区的长度。
//     * 当第一个元素被添加时，空ArrayList == DEFAULTCAPACITY_EMPTY_ELEMENTDATA将被扩展为DEFAULT_CAPACITY。
//     */
//    transient Object[] elementData;
//
//    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
//
//    protected transient int modCount = 0;
//
//    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
//    // 无参构造器
//    public ArrayLinearList() {
//        arr = (T[]) new Object[maxsize];
//    }
//
//    //有参构造器
//    public ArrayLinearList(int length) {
//        arr = (T[]) new Object[length];
//        //另一种初始化方式
////        t = (T[]) Array.newInstance(clz, maxsize);
//    }
//
//    // 增加
//    @Override
//    public void add(int index, T o) {
//        if (index > size || index < 0)
//            throw new IndexOutOfBoundsException("下标索引越界");
//
//    }
//    @Override
//    public void add(T o) {
//        //首先判断数组是否满了
//        ensureCapacityInternal(size + 1);
//    }
//
//    // 修改
//    @Override
//    public void modify(int index, T o) {
//
//    }
//
//    @Override
//    public void remove(int index) {
//
//    }
//
//    @Override
//    public T get(int index) {
//        return null;
//    }
//
//    @Override
//    public boolean isEmpty() {
//        return false;
//    }
//
//    @Override
//    public int indexOf(Object o) {
//        return 0;
//    }
//
//    @Override
//    public void size() {
//
//    }
//
//    @Override
//    public void next() {
//
//    }
//
//    @Override
//    public void clear() {
//
//    }
//
//    @Override
//    public Iterator<T> iterator() {
//        return null;
//    }
//
//
//    private void ensureCapacityInternal(int minCapacity) {
//        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
//    }
//
//    private static int calculateCapacity(Object[] elementData, int minCapacity) {
//        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
//            return Math.max(DEFAULT_CAPACITY, minCapacity);
//        }
//        return minCapacity;
//    }
//
//    private void ensureExplicitCapacity(int minCapacity) {
//        modCount++;
//
//        // overflow-conscious code
//        if (minCapacity - elementData.length > 0)
//            grow(minCapacity);
//    }
//
//    private void grow(int minCapacity) {
//        // overflow-conscious code
//        int oldCapacity = elementData.length;
//        int newCapacity = oldCapacity + (oldCapacity >> 1);
//        if (newCapacity - minCapacity < 0)
//            newCapacity = minCapacity;
//        if (newCapacity - MAX_ARRAY_SIZE > 0)
//            newCapacity = hugeCapacity(minCapacity);
//        // minCapacity is usually close to size, so this is a win:
//        elementData = Arrays.copyOf(elementData, newCapacity);
//    }
//
//    private static int hugeCapacity(int minCapacity) {
//        if (minCapacity < 0) // overflow
//            throw new OutOfMemoryError();
//        return (minCapacity > MAX_ARRAY_SIZE) ?
//                Integer.MAX_VALUE :
//                MAX_ARRAY_SIZE;
//    }